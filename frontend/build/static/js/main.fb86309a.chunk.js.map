{"version":3,"sources":["audio/Experiment.ts","audio/ExperimentComponent.tsx","audio/WavFile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ExperimentOption","FileDescriptor","name","relative_path","this","json","Experiment","file_a","file_b","fromJson","PlayState","WavFile","props","state","icon","isPlaying","className","onClick","playCallback","experimentOption","file","voteCallback","React","Component","ExperimentComponent","playState","None","count","autoplay","fetchStats","finally","fetchNewExperiment","fetch","method","then","res","trial_count","undefined","setState","howl","stop","experiment","incrementCount","handleAutoplay","play","A","OptionA","B","OptionB","option","newPlayState","url","getWavUrl","Howl","src","onend","winner","loser","headers","body","JSON","stringify","_json","internalView","renderEmpty","renderExperiment","autoplayToggleLabel","renderExperimentOption","toggleAutoplay","bind","vote","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb86309a.chunk.js","sourcesContent":["\nexport class FileDescriptor {\n\n  name: string;\n  relative_path: string;\n\n  constructor(name: string, relative_path: string) {\n    this.name = name;\n    this.relative_path = relative_path;\n  }\n\n  static fromJson(json: any) : FileDescriptor {\n    return new FileDescriptor(json.name, json.relative_path);\n  }\n  \n  getWavUrl() : string {\n    return `http://localhost:5000/wav/${this.relative_path}`\n  }\n}\n\nexport class Experiment {\n\n  file_a: FileDescriptor;\n  file_b: FileDescriptor;\n\n  constructor(file_a: FileDescriptor, file_b: FileDescriptor) {\n    this.file_a = file_a;\n    this.file_b = file_b;\n  }\n\n  static fromJson(json: any) : Experiment {\n    const fd_a = FileDescriptor.fromJson(json.file_a);\n    const fd_b = FileDescriptor.fromJson(json.file_b);\n    return new Experiment(fd_a, fd_b);\n  }\n}\n\nexport enum ExperimentOption {\n  A,\n  B,\n}\n","import React from 'react';\nimport { Howl } from 'howler';\nimport { Experiment, ExperimentOption } from \"./Experiment\";\nimport { WavFile } from \"./WavFile\";\n\ninterface Props {\n}\n\ninterface State {\n  howl?: Howl,\n  playState: PlayState,\n  experiment?: Experiment,\n  count: number,\n  autoplay: boolean,\n}\n\nenum PlayState {\n  None,\n  OptionA,\n  OptionB,\n}\n\nclass ExperimentComponent extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      playState: PlayState.None,\n      count: 0,\n      autoplay: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchStats()\n      .finally(() => {\n        this.fetchNewExperiment();\n      });\n  }\n\n  fetchStats() : Promise<any> {\n    const url = 'http://localhost:5000/stats';\n\n    return fetch(url, {\n      method: 'GET',\n    })\n    .then(res => res.json())\n    .then(json => {\n      const count = json.trial_count;\n      if (count !== undefined) {\n        this.setState({\n          count: count,\n        })\n      }\n    })\n  }\n\n  fetchNewExperiment() {\n    if (this.state.howl !== undefined) {\n      // Stop playing any old experiment.\n      this.state.howl.stop();\n      this.setState({\n        playState: PlayState.None,\n        howl: undefined,\n      });\n    }\n\n    const url = 'http://localhost:5000/experiment';\n\n    fetch(url, {\n      method: 'GET',\n    })\n    .then(res => res.json())\n    .then(json => {\n      const experiment = Experiment.fromJson(json);\n      this.setState({\n        experiment: experiment\n      });\n      this.incrementCount();\n      this.handleAutoplay();\n    })\n  }\n\n  handleAutoplay() {\n    if(!this.state.autoplay) {\n      this.stop(); // Removes play state\n      return;\n    }\n\n    switch (this.state.playState) {\n      case PlayState.None:\n        this.play(ExperimentOption.A);\n        break;\n      case PlayState.OptionA:\n        this.play(ExperimentOption.B);\n        break;\n      case PlayState.OptionB:\n        this.stop();\n        break;\n    }\n  }\n\n  public play(option: ExperimentOption) {\n    if (this.state.howl !== undefined) {\n      this.state.howl.stop();\n    }\n\n    let file;\n    let newPlayState = PlayState.None;\n\n    switch (option) {\n      case ExperimentOption.A:\n        file = this.state.experiment?.file_a;\n        newPlayState = PlayState.OptionA;\n        break;\n      case ExperimentOption.B:\n        file = this.state.experiment?.file_b;\n        newPlayState = PlayState.OptionB;\n        break;\n    }\n\n    let howl;\n\n    if (newPlayState === this.state.playState) {\n      // Same file; stop playing.\n      newPlayState = PlayState.None;\n    } else {\n      let url = file!.getWavUrl();\n      howl = new Howl({\n        src: [url],\n        onend: () => {\n          this.handleAutoplay();\n        }\n      });\n\n      howl.play();\n    }\n\n    this.setState({ \n      playState: newPlayState,\n      howl: howl,\n    });\n  }\n\n  public vote(option: ExperimentOption) {\n    this.stop();\n\n    const url = 'http://localhost:5000/vote';\n\n    let winner;\n    let loser;\n\n    switch (option) {\n      case ExperimentOption.A:\n        winner = this.state.experiment?.file_a.relative_path;\n        loser = this.state.experiment?.file_b.relative_path;\n        break;\n      case ExperimentOption.B:\n        winner = this.state.experiment?.file_b.relative_path;\n        loser = this.state.experiment?.file_a.relative_path;\n        break;\n    }\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify({\n        winner: winner,\n        loser: loser,\n      }),\n    })\n    .then(_json => {\n      this.fetchNewExperiment();\n    })\n  }\n\n  public stop() {\n    if (this.state.howl !== undefined) {\n      this.state.howl.stop();\n    }\n    this.setState({\n      playState: PlayState.None,\n      howl: undefined,\n    });\n  }\n\n  incrementCount() {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  toggleAutoplay() {\n    this.setState({\n      autoplay: !this.state.autoplay\n    })\n  }\n\n  public render() {\n    let internalView;\n    \n    if (this.state.experiment === undefined) {\n      internalView = this.renderEmpty();\n    } else {\n      internalView = this.renderExperiment();\n    }\n\n    return (\n      <div>\n        {internalView}\n      </div>\n    )\n  }\n\n  renderEmpty() {\n    return (\n      <h1>Loading...</h1>\n    );\n  }\n\n  renderExperiment() {\n    let autoplayToggleLabel = \"Turn autoplay ON\";\n    if (this.state.autoplay) {\n       autoplayToggleLabel = \"Turn autoplay OFF\";\n    }\n\n    return (\n      <div className=\"experiment\">\n        <h1>Trial {this.state.count}</h1>\n        <div className=\"wav-experiment-container\">\n          {this.renderExperimentOption(ExperimentOption.A)}\n          {this.renderExperimentOption(ExperimentOption.B)}\n        </div>\n        <button onClick={() => this.fetchNewExperiment()}>Skip</button>\n        <button onClick={() => this.toggleAutoplay()}>{autoplayToggleLabel}</button>\n      </div>\n    );\n  }\n\n  renderExperimentOption(option: ExperimentOption) {\n    let isPlaying = false;\n    let file;\n    switch (option) {\n      case ExperimentOption.A:\n        file = this.state.experiment!.file_a;\n        isPlaying = this.state.playState === PlayState.OptionA;\n        break;\n      case ExperimentOption.B:\n        file = this.state.experiment!.file_b;\n        isPlaying = this.state.playState === PlayState.OptionB;\n        break;\n    }\n    return (\n      <WavFile \n        file={file} \n        isPlaying={isPlaying}\n        experimentOption={option}\n        playCallback={this.play.bind(this)}\n        voteCallback={this.vote.bind(this)}\n        />\n    )\n  }\n}\n\nexport default ExperimentComponent;\n","import React from 'react';\nimport { FileDescriptor, ExperimentOption } from \"./Experiment\";\n\ninterface Props {\n  experimentOption: ExperimentOption\n  file: FileDescriptor,\n  isPlaying: boolean,\n  playCallback: (option: ExperimentOption) => void,\n  voteCallback: (option: ExperimentOption) => void,\n}\n\ninterface State {\n}\n\nclass WavFile extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  public render() {\n    const icon = this.props.isPlaying ? \n      <span className=\"icon\">&#128266;</span>\n      : <span className=\"icon\">&#128264;</span>;\n\n    const className = this.props.isPlaying ? \"wav-file playing\" : \"wav-file\";\n\n    return (\n      <div className=\"experiment-option-container\">\n        <div className={className} onClick={() => this.props.playCallback(this.props.experimentOption)}>\n          {icon}\n          <div className=\"filename\">{this.props.file.name}</div>\n        </div>\n        <button onClick={() => this.props.voteCallback(this.props.experimentOption)}>Vote</button>\n      </div>\n    )\n  }\n}\n\nexport { WavFile };\n\n","import React from 'react';\nimport './App.css';\nimport ExperimentComponent from './audio/ExperimentComponent'\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <ExperimentComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}